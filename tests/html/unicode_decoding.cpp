#include "unicode_decoding.h"

#include <qregularexpression.h>
#include <qiodevice.h>
#include <qdebug.h>

QHash<QString, int> UnicodeDecoding::html_entities = {
    { LSTR("quot"), 34 },
    { LSTR("amp"), 38 },
    { LSTR("apos"), 39 },
    { LSTR("lt"), 60 },
    { LSTR("gt"), 62 },

    { LSTR("nbsp"), 32 }, // 160
    { LSTR("iexcl"), 161 },
    { LSTR("cent"), 162 },
    { LSTR("pound"), 163 },
    { LSTR("curren"), 164 },
    { LSTR("yen"), 165 },
    { LSTR("brvbar"), 166 },
    { LSTR("sect"), 167 },
    { LSTR("uml"), 168 },
    { LSTR("copy"), 169 },
    { LSTR("ordf"), 170 },
    { LSTR("laquo"), 171 },
    { LSTR("not"), 172 },
    { LSTR("shy"), 173 },
    { LSTR("reg"), 174 },
    { LSTR("macr"), 175 },
    { LSTR("deg"), 176 },
    { LSTR("plusmn"), 177 },
    { LSTR("sup2"), 178 },
    { LSTR("sup3"), 179 },
    { LSTR("acute"), 180 },
    { LSTR("micro"), 181 },
    { LSTR("para"), 182 },
    { LSTR("middot"), 183 },
    { LSTR("cedil"), 184 },
    { LSTR("sup1"), 185 },
    { LSTR("ordm"), 186 },
    { LSTR("raquo"), 187 },
    { LSTR("frac14"), 188 },
    { LSTR("frac12"), 189 },
    { LSTR("frac34"), 190 },






//    ¿ 	перевёрнутый знак вопроса 	&iquest; 	&#191;
//    À 	латинская заглавная A с грависом («тупым ударением») 	&Agrave; 	&#192;
//    Á 	латинская заглавная A с акутом («острым ударением») 	&Aacute; 	&#193;
//    Â 	латинская заглавная A с циркумфлексом 	&Acirc; 	&#194;
//    Ã 	латинская заглавная A с тильдой 	&Atilde; 	&#195;
//    Ä 	латинская заглавная A с тремой 	&Auml; 	&#196;
//    Å 	латинская заглавная A с кружком сверху 	&Aring; 	&#197;
//    Æ 	латинская заглавная лигатура AE 	&AElig; 	&#198;
//    Ç 	латинская заглавная C с седилью 	&Ccedil; 	&#199;
//    È 	латинская заглавная E с грависом 	&Egrave; 	&#200;
//    É 	латинская заглавная E с акутом 	&Eacute; 	&#201;
//    Ê 	латинская заглавная E с циркумфлексом 	&Ecirc; 	&#202;
//    Ë 	латинская заглавная E с тремой 	&Euml; 	&#203;
//    Ì 	латинская заглавная I с грависом 	&Igrave; 	&#204;
//    Í 	латинская заглавная I с акутом 	&Iacute; 	&#205;
//    Î 	латинская заглавная I с циркумфлексом 	&Icirc; 	&#206;
//    Ï 	латинская заглавная I с тремой 	&Iuml; 	&#207;
//    Ð 	латинская заглавная буква «eth» 	&ETH; 	&#208;
//    Ñ 	латинская заглавная N с тильдой 	&Ntilde; 	&#209;
//    Ò 	латинская заглавная O с грависом 	&Ograve; 	&#210;
//    Ó 	латинская заглавная O с акутом 	&Oacute; 	&#211;
//    Ô 	латинская заглавная O с циркумфлексом 	&Ocirc; 	&#212;
//    Õ 	латинская заглавная O с тильдой 	&Otilde; 	&#213;
//    Ö 	латинская заглавная O с тремой 	&Ouml; 	&#214;
//    × 	знак умножения 	&times; 	&#215;
//    Ø 	латинская заглавная O диагонально перечёркнутая 	&Oslash; 	&#216;
//    Ù 	латинская заглавная U с грависом 	&Ugrave; 	&#217;
//    Ú 	латинская заглавная U с акутом 	&Uacute; 	&#218;
//    Û 	латинская заглавная U с циркумфлексом 	&Ucirc; 	&#219;
//    Ü 	латинская заглавная U с тремой 	&Uuml; 	&#220;
//    Ý 	латинская заглавная Y с акутом 	&Yacute; 	&#221;
//    Þ 	латинская заглавная буква Торн (THORN) 	&THORN; 	&#222;
//    ß 	латинская буква эсцет 	&szlig; 	&#223;
//    à 	латинская "a" с грависом 	&agrave; 	&#224;
//    á 	латинская "a" с акутом 	&aacute; 	&#225;
//    â 	латинская "a" с циркумфлексом 	&acirc; 	&#226;
//    ã 	латинская "a" с тильдой 	&atilde; 	&#227;
//    ä 	латинская "a" с тремой 	&auml; 	&#228;
//    å 	латинская "a" с кружком сверху 	&aring; 	&#229;
//    æ 	латинская "ae" 	&aelig; 	&#230;
//    ç 	латинская "c" седилья 	&ccedil; 	&#231;
//    è 	латинская "e" с грависом 	&egrave; 	&#232;
//    é 	латинская "e" с акутом 	&eacute; 	&#233;
//    ê 	латинская "e" с циркумфлексом 	&ecirc; 	&#234;
//    ë 	латинская "e" с тремой 	&euml; 	&#235;
//    ì 	латинская "i" с грависом 	&igrave; 	&#236;
//    í 	латинская "i" с акутом 	&iacute; 	&#237;
//    î 	латинская "i" с циркумфлексом 	&icirc; 	&#238;
//    ï 	латинская "i" с тремой 	&iuml; 	&#239;
//    ð 	латинская "eth" 	&eth; 	&#240;
//    ñ 	латинская "n" с тильдой 	&ntilde; 	&#241;
//    ò 	латинская "o" с грависом 	&ograve; 	&#242;
//    ó 	латинская "o" с акутом 	&oacute; 	&#243;
//    ô 	латинская "o" с циркумфлексом 	&ocirc; 	&#244;
//    õ 	латинская "o" с тильдой 	&otilde; 	&#245;
//    ö 	латинская "o" с тремой 	&ouml; 	&#246;
//    ÷ 	знак деления 	&divide; 	&#247;
//    ø 	латинская "o" диагонально перечёркнутая 	&oslash; 	&#248;
//    ù 	латинская "u" с грависом 	&ugrave; 	&#249;
//    ú 	латинская "u" с акутом 	&uacute; 	&#250;
//    û 	латинская "u" с циркумфлексом 	&ucirc; 	&#251;
//    ü 	латинская "u" с тремой 	&uuml; 	&#252;
//    ý 	латинская "y" с акутом 	&yacute; 	&#253;
//    þ 	латинская буква "торн" (thorn) 	&thorn; 	&#254;
//    ÿ 	латинская "y" с тремой 	&yuml; 	&#255;


//    &fnof; 	&#402;
//    Греческие
//    Α 	греческая заглавная альфа 	&Alpha; 	&#913;
//    Β 	греческая заглавная бета 	&Beta; 	&#914;
//    Γ 	греческая заглавная гамма 	&Gamma; 	&#915;
//    Δ 	греческая заглавная дельта 	&Delta; 	&#916;
//    Ε 	греческая заглавная эпсилон 	&Epsilon; 	&#917;
//    Ζ 	греческая заглавная дзета 	&Zeta; 	&#918;
//    Η 	греческая заглавная эта 	&Eta; 	&#919;
//    Θ 	греческая заглавная тета 	&Theta; 	&#920;
//    Ι 	греческая заглавная йота 	&Iota; 	&#921;
//    Κ 	греческая заглавная каппа 	&Kappa; 	&#922;
//    Λ 	греческая заглавная лямбда 	&Lambda; 	&#923;
//    Μ 	греческая заглавная мю 	&Mu; 	&#924;
//    Ν 	греческая заглавная ню 	&Nu; 	&#925;
//    Ξ 	греческая заглавная кси 	&Xi; 	&#926;
//    Ο 	греческая заглавная омикрон 	&Omicron; 	&#927;
//    Π 	греческая заглавная пи 	&Pi; 	&#928;
//    Ρ 	греческая заглавная ро 	&Rho; 	&#929;
//    Σ 	греческая заглавная сигма 	&Sigma; 	&#931;
//    Τ 	греческая заглавная тау 	&Tau; 	&#932;
//    Υ 	греческая заглавная ипсилон 	&Upsilon; 	&#933;
//    Φ 	греческая заглавная фи 	&Phi; 	&#934;
//    Χ 	греческая заглавная хи 	&Chi; 	&#935;
//    Ψ 	греческая заглавная пси 	&Psi; 	&#936;
//    Ω 	греческая заглавная омега 	&Omega; 	&#937;
//    α 	греческая строчная альфа 	&alpha; 	&#945;
//    β 	греческая строчная бета 	&beta; 	&#946;
//    γ 	греческая строчная гамма 	&gamma; 	&#947;
//    δ 	греческая строчная дельта 	&delta; 	&#948;
//    ε 	греческая строчная эпсилон 	&epsilon; 	&#949;
//    ζ 	греческая строчная дзета 	&zeta; 	&#950;
//    η 	греческая строчная эта 	&eta; 	&#951;
//    θ 	греческая строчная тета 	&theta; 	&#952;
//    ι 	греческая строчная йота 	&iota; 	&#953;
//    κ 	греческая строчная каппа 	&kappa; 	&#954;
//    λ 	греческая строчная ламбда 	&lambda; 	&#955;
//    μ 	греческая строчная мю 	&mu; 	&#956;
//    ν 	греческая строчная ню 	&nu; 	&#957;
//    ξ 	греческая строчная кси 	&xi; 	&#958;
//    ο 	греческая строчная омикрон 	&omicron; 	&#959;
//    π 	греческая строчная пи 	&pi; 	&#960;
//    ρ 	греческая строчная ро 	&rho; 	&#961;
//    ς 	греческая конечная сигма 	&sigmaf; 	&#962;
//    σ 	греческая строчная сигма 	&sigma; 	&#963;
//    τ 	греческая строчная тау 	&tau; 	&#964;
//    υ 	греческая строчная ипсилон 	&upsilon; 	&#965;
//    φ 	греческая строчная фи 	&phi; 	&#966;
//    χ 	греческая строчная хи 	&chi; 	&#967;
//    ψ 	греческая строчная пси 	&psi; 	&#968;
//    ω 	греческая строчная омега 	&omega; 	&#969;
//    ϑ 	греческая символьная тета 	&thetasym; 	&#977;
//    ϒ 	греческий ипсилон с хвостиком 	&upsih; 	&#978;
//    ϖ 	греческая строчная пи (другой вариант) 	&piv; 	&#982;
//    Основная пунктуация
//    • 	маркер списка (буллит) 	&bull; 	&#8226;
//    … 	горизонтальное многоточие 	&hellip; 	&#8230;
//    ′ 	штрих 	&prime; 	&#8242;
//    ″ 	двойной штрих 	&Prime; 	&#8243;
//    ‾ 	верхняя черта 	&oline; 	&#8254;
//    ⁄ 	косая черта 	&frasl; 	&#8260;
//    Буквоподобные символы
//    ℘ 	рукописная заглавная P = power set = Weierstrass p 	&weierp; 	&#8472;
//    ℑ 	чёрная заглавная I = мнимая часть 	&image; 	&#8465;
//    ℜ 	чёрная заглавная R = вещественная часть 	&real; 	&#8476;
//    ™ 	товарный знак 	&trade; 	&#8482;
//    ℵ 	буква Алеф — кардинальное число 	&alefsym; 	&#8501;
//    Стрелки
//    ← 	влево 	&larr; 	&#8592;
//    ↑ 	вверх 	&uarr; 	&#8593;
//    → 	вправо 	&rarr; 	&#8594;
//    ↓ 	вниз 	&darr; 	&#8595;
//    ◄ 	влево 		&#9668;
//    ▲ 	вверх 		&#9650;
//    ► 	вправо 		&#9658;
//    ▼ 	вниз 		&#9660;
//    ↔ 	влево-вправо 	&harr; 	&#8596;
//    ↵ 	вниз с углом вправо = возврат каретки 	&crarr; 	&#8629;
//    ⇐ 	двойная стрелка влево 	&lArr; 	&#8656;
//    ⇑ 	двойная вверх 	&uArr; 	&#8657;
//    ⇒ 	двойная вправо 	&rArr; 	&#8658;
//    ⇓ 	двойная вниз 	&dArr; 	&#8659;
//    ⇔ 	двойная влево-вправо 	&hArr; 	&#8660;
//    Математические операции
//    [ 	левая квадратная скобка 		&#91;
//    ] 	правая квадратная скобка 		&#93;
//    / 	деление 		&#47;
//    \ 	разность множеств 		&#92;
//    ∀ 	для всех 	&forall; 	&#8704;
//    ∂ 	частичный дифференциал 	&part; 	&#8706;
//    ∃ 	существует 	&exist; 	&#8707;
//    ∅ 	пустое множество 	&empty; 	&#8709;
//    ∇ 	оператор набла = backward difference 	&nabla; 	&#8711;
//    ∈ 	принадлежит 	&isin; 	&#8712;
//    ∉ 	не принадлежит 	&notin; 	&#8713;
//    ∋ 	содержит 	&ni; 	&#8715;
//    ∏ 	знак произведения 	&prod; 	&#8719;
//    ∑ 	знак суммы 	&sum; 	&#8721;
//    − 	минус 	&minus; 	&#8722;
//    ∗ 	оператор звёздочка 	&lowast; 	&#8727;
//    √ 	квадратный корень = знак радикала 	&radic; 	&#8730;
//    ∝ 	пропорционально к 	&prop; 	&#8733;
//    ∞ 	бесконечность 	&infin; 	&#8734;
//    ∠ 	угол 	&ang; 	&#8736;
//    ∧ 	логическое И = wedge 	&and; 	&#8743;
//    ∨ 	логическое ИЛИ = vee 	&or; 	&#8744;
//    ∩ 	пересечение = cap 	&cap; 	&#8745;
//    ∪ 	объединение = cup 	&cup; 	&#8746;
//    ∫ 	интеграл 	&int; 	&#8747;
//    ∴ 	следовательно 	&there4; 	&#8756;
//    ∼ 	оператор тильда = varies with = подобно 	&sim; 	&#8764;
//    ≅ 	конгруэнтно 	&cong; 	&#8773;
//    ≈ 	примерно равно 	&asymp; 	&#8776;
//    ≠ 	не равно 	&ne; 	&#8800;
//    ≡ 	тождественно равно 	&equiv; 	&#8801;
//    ≤ 	меньше или равно 	&le; 	&#8804;
//    ≥ 	больше или равно 	&ge; 	&#8805;
//    ⊂ 	подмножество 	&sub; 	&#8834;
//    ⊃ 	включает в себя 	&sup; 	&#8835;
//    ⊄ 	не включает в себя 	&nsub; 	&#8836;
//    ⊆ 	подмножество или эквивалентно 	&sube; 	&#8838;
//    ⊇ 	включает в себя или эквивалентно 	&supe; 	&#8839;
//    ⊕ 	плюс в круге = прямая сумма 	&oplus; 	&#8853;
//    ⊗ 	умножение в круге = тензорное произведение 	&otimes; 	&#8855;
//    ⊥ 	up tack = ортогонально к = перпендикулярно 	&perp; 	&#8869;
//    ⋅ 	оператор точка 	&sdot; 	&#8901;
//    Различные технические
//    ⌈ 	левая скобка округления вверх = apl upstile 	&lceil; 	&#8968;
//    ⌉ 	правая скобка округления вверх 	&rceil; 	&#8969;
//    ⌊ 	левая скобка округления вниз = apl downstile 	&lfloor; 	&#8970;
//    ⌋ 	правая скобка округления вниз 	&rfloor; 	&#8971;
//    〈 	угловая скобка влево = бра 	&lang; 	&#9001;
//    〉 	угловая скобка вправо = кет 	&rang; 	&#9002;
//    Геометрические Фигуры
//    ◊ 	ромб 	&loz; 	&#9674;
//    Различные символы
//    ♠ 	«пики» (картёжные) 	&spades; 	&#9824;
//    ♣ 	«трефы» 	&clubs; 	&#9827;
//    ♥ 	«червы» 	&hearts; 	&#9829;
//    ♦ 	«бубны» 	&diams; 	&#9830;
//    Latin Extended-A
//    Œ 	латинская заглавная лигатура OE 	&OElig; 	&#338;
//    œ 	латинская лигатура oe 	&oelig; 	&#339;
//    Š 	латинская заглавная S с птичкой 	&Scaron; 	&#352;
//    š 	латинская s с птичкой 	&scaron; 	&#353;
//    Ÿ 	латинская заглавная Y с двоеточием 	&Yuml; 	&#376;
//    Модификаторы букв
//    ˆ 	акцент перевёрнутая птичка/circumflex accent 	&circ; 	&#710;
//    ˜ 	малая тильда 	&tilde; 	&#732;
//    Общая пунктуация
//        пробел длины N 	&ensp; 	&#8194;
//        пробел длины M 	&emsp; 	&#8195;
//        узкий пробел 	&thinsp; 	&#8201;
//    ‌ 	zero width non-joiner 	&zwnj; 	&#8204;
//    ‍ 	zero width joiner 	&zwj; 	&#8205;
//    ‎ 	left-to-right mark 	&lrm; 	&#8206;
//    ‏ 	right-to-left mark 	&rlm; 	&#8207;
//    ‑ 	неразрывный (неразделяемый) дефис / non-breaking hyphen 	  	&#8209;
//    – 	тире длины N 	&ndash; 	&#8211;
//    — 	тире длины M 	&mdash; 	&#8212;
//    ‘ 	одиночная левая кавычка 	&lsquo; 	&#8216;
//    ’ 	одиночная правая кавычка 	&rsquo; 	&#8217;
//    ‚ 	одиночная low-9/нижняя кавычка 	&sbquo; 	&#8218;
//    “ 	двойная левая кавычка 	&ldquo; 	&#8220;
//    ” 	двойная правая кавычка 	&rdquo; 	&#8221;
//    „ 	двойная low-9/нижняя кавычка 	&bdquo; 	&#8222;
//    † 	крест/dagger 	&dagger; 	&#8224;
//    ‡ 	двойной dagger 	&Dagger; 	&#8225;
//    ‰ 	промилле 	&permil; 	&#8240;
//    ‹ 	одиночная левая угловая скобка (предложена, но ещё не стандартизирована ISO) 	&lsaquo; 	&#8249;
//    › 	одиночная правая угловая скобка (предложена, но ещё не стандартизирована ISO) 	&rsaquo; 	&#8250;
//    € 	евро 	&euro; 	&#8364;
};

void UnicodeDecoding::toUtf8(const CharsetType & charset, QIODevice * io, QString & result, char & in) {
    switch(charset) {
        case charset_utf8: { scanUtf8Char(io, result, in); break;}
        case charset_cp1251: { scanRuChar(io, result, in); break;}
        default: result.append(in);
    }
}

void UnicodeDecoding::scanRuChar(QIODevice * /*io*/, QString & result, char & in) {
    int uc = in < 0 ? in + 256 : in;

    if (uc < 192)
        uc = cp1251_table[uc - 128];
    else
        uc = uc + 848;

    result.append(QChar(uc));
}

void UnicodeDecoding::scanUtf8Char(QIODevice * io, QString & result, char & in) {
    int need;
    uint min_uc, uc;

    if ((in & 0xe0) == 0xc0) {
        uc = in & 0x1f;
        need = 1;
        min_uc = 0x80;
    } else if ((in & 0xf0) == 0xe0) {
        uc = in & 0x0f;
        need = 2;
        min_uc = 0x800;
    } else if ((in&0xf8) == 0xf0) {
        uc = in & 0x07;
        need = 3;
        min_uc = 0x10000;
    } else {
        qDebug() << "BLIA " << in;
        result.append(in);
        return;
    }

//        if (io -> bytesAvailable() < need) { result.append(ch); return;}

    for (int i = 0; i < need; ++i) {
        io -> getChar(&in);
        if ((in & 0xc0) != 0x80) { qDebug() << "PIPEC" << in; return; }
        uc = (uc << 6) | (in & 0x3f);
    }

    if (isUnicodeNonCharacter(uc) || uc >= 0x110000 || (uc < min_uc) || (uc >= 0xd800 && uc <= 0xdfff)) {
        qDebug() << "UNEBABLE"; return;
    }

    if (QChar::requiresSurrogates(uc)) {
        result.append(QChar::highSurrogate(uc));
        result.append(QChar::lowSurrogate(uc));
    }
    else result.append(QChar(uc));
}

//    void UnicodeDecoding::scanUtf8Char(char * io, QString & result) { // not worked
//        int need;
//        uint min_uc, uc;

//        if (((*io) & 0xe0) == 0xc0) {
//            uc = (*io) & 0x1f;
//            need = 1;
//            min_uc = 0x80;
//        } else if (((*io) & 0xf0) == 0xe0) {
//            uc = (*io) & 0x0f;
//            need = 2;
//            min_uc = 0x800;
//        } else if (((*io)&0xf8) == 0xf0) {
//            uc = (*io) & 0x07;
//            need = 3;
//            min_uc = 0x10000;
//        } else {
//            qDebug() << "BLIA " << (*io);
//            result.append((*io));
//            return;
//        }

////        if (io -> bytesAvailable() < need) { result.append(ch); return;}

//        for (int i = 0; i < need; ++i, io++) {
//            if (((*io)&0xc0) != 0x80) { qDebug() << "PIPEC" << (*io); return; }
//            uc = (uc << 6) | ((*io) & 0x3f);
//        }

//        if (isUnicodeNonCharacter(uc) || uc >= 0x110000 || (uc < min_uc) || (uc >= 0xd800 && uc <= 0xdfff)) {
//            qDebug() << "UNEBABLE"; return;
//        }

//        if (QChar::requiresSurrogates(uc)) { result.append(QChar::highSurrogate(uc)); result.append(QChar::lowSurrogate(uc)); }
//        else result.append(QChar(uc));
//    }

UnicodeDecoding::CharsetType UnicodeDecoding::toCharsetType(const QString & ch_name) {
    QString l_name = ch_name.toLower();

    if (l_name == QStringLiteral("utf-8"))
        return charset_utf8;
    else if (l_name == QStringLiteral("windows-1251"))
        return charset_cp1251;

    return charset_unknown;
}

void UnicodeDecoding::decodeHtmlEntites(QString & string) {
    QRegularExpression reg("&([#\\w]+);");
    QRegularExpressionMatch match;
    int index = 0;

    while(true) {
        index = string.indexOf(reg, index, &match);
        if (index == -1) break;

        int sel_start = match.capturedStart(1);
        int sel_length = match.capturedLength(1);

        QString entity = string.mid(sel_start, sel_length);
        QChar res;

        if (entity.startsWith('#'))
            res = QChar(entity.mid(1).toInt());
        else {
            if (!html_entities.contains(entity)) {
                res = ' ';
                qDebug() << "HTML ENTITY NOT EXISTS" << entity;
            } else
                res = html_entities[entity];
        }

        string.replace(match.capturedStart(0), match.capturedLength(0), res);
    }
}
